{"meta":{"title":"山海经","subtitle":"","description":"记录身边的贵物","author":"Liu Hao","url":"http://zutlh.top","root":"/"},"pages":[{"title":"about","date":"2022-04-21T08:18:10.000Z","updated":"2022-04-21T08:59:43.477Z","comments":true,"path":"about/index.html","permalink":"http://zutlh.top/about/index.html","excerpt":"","text":""}],"posts":[{"title":"reference","slug":"reference","date":"2022-05-25T08:40:21.000Z","updated":"2022-05-25T08:40:21.655Z","comments":true,"path":"2022/05/25/reference/","link":"","permalink":"http://zutlh.top/2022/05/25/reference/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"浅谈parallelStream","slug":"parallelStream","date":"2022-05-24T02:14:40.000Z","updated":"2022-05-25T08:35:44.972Z","comments":true,"path":"2022/05/24/parallelStream/","link":"","permalink":"http://zutlh.top/2022/05/24/parallelStream/","excerpt":"","text":"了解parallelStream的作用与理解Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。 而和迭代器又不同的是，Stream 可以并行化操作，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个 item 读完后再读下一个 item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream 的并行操作依赖于 Java7 中引入的 Fork&#x2F;Join 框架（JSR166y）来拆分任务和加速处理过程。 parallelStream是什么parallelStream其实就是一个并行执行的流.它通过默认的ForkJoinPool,可能提高你的多线程任务的速度. parallelStream的作用Stream具有平行处理能力，处理的过程会分而治之，也就是将一个大任务切分成多个小任务，这表示每个任务都是一个操作，因此像以下的程式片段： 1234567891011121314151617public class parallelStream &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; integers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9); integers.parallelStream().forEach(System.out::println); &#125;&#125;output:658974123 你得到的展示顺序不一定会是1、2、3、4、5、6、7、8、9，而可能是任意的顺序，就forEach()这个操作來讲，如果平行处理时，希望最后顺序是按照原来Stream的数据顺序，那可以调用forEachOrdered()。 123List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);numbers.parallelStream() .forEachOrdered(out::println);","categories":[],"tags":[{"name":"learnKnowledge","slug":"learnKnowledge","permalink":"http://zutlh.top/tags/learnKnowledge/"}]},{"title":"每天一个知识点(一)","slug":"learnKnowledgeday1","date":"2022-05-23T06:05:09.000Z","updated":"2022-05-23T06:20:41.101Z","comments":true,"path":"2022/05/23/learnKnowledgeday1/","link":"","permalink":"http://zutlh.top/2022/05/23/learnKnowledgeday1/","excerpt":"","text":"关于Java中子类是否可以访问父类的私有属性首先从子类是否可以继承父类的私有属性来看： 从继承的概念来说，private和final不被继承。Java官方文档上是这么说的。 从内存的角度来说，父类的一切都被继承（从父类构造方法被调用就知道了，因为new一个对象，就会调用构造方法，子类被new的时候就会调用父类的构造方法，所以从内存的角度来说，子类拥有一个完整的父类）。子类对象所引用的内存有父类变量的一份拷贝。 那么子类是否可以访问父类的私有属性呢？ 如果父类中有对私有属性的get和set的方法，而且是public的修饰的方法， 子类在继承父类的同时，也继承了带有public修饰的set和get方法，所以可以通过以下方式子类可以访问到父类的私有属性。 1234567891011121314151617181920212223242526272829303132333435363738package test; class Person&#123; private String name; public Integer age; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public Integer getAge() &#123; return age; &#125; public void setAge(Integer age) &#123; this.age = age; &#125; &#125; class Student extends Person&#123; &#125; public class Test &#123; public static void main(String[] args) &#123; Student s = new Student(); s.age = 12; s.setName(&quot;小明&quot;); String name = s.getName(); System.out.println(&quot;name = &quot;+ name); &#125;&#125; 通过调用子类中从父类那里继承的set和get方法来访问父类中私有属性name。 但是要记住，子类并非继承到父类的私有属性name，子类只是继承了父类的非私有属性，比如以上例子的 age 属性。 虽然子类可以通过以上的方法可以访问父类的私有属性，但是在做java题时，一般说子类可以访问父类的私有属性这些说法都是错误的。 要注意一点，如果父类中没有对私有属性的 get 和 set 方法或者其他对私有属性操作的方法，又或者这些方法都被private修饰， 这样子类是无法访问到父类的私有属性的。","categories":[],"tags":[{"name":"learnKnowledge","slug":"learnKnowledge","permalink":"http://zutlh.top/tags/learnKnowledge/"}]},{"title":"threadlocal","slug":"threadlocal","date":"2022-05-20T06:30:48.000Z","updated":"2022-06-14T09:01:41.289Z","comments":true,"path":"2022/05/20/threadlocal/","link":"","permalink":"http://zutlh.top/2022/05/20/threadlocal/","excerpt":"","text":"ThreadLocal在下面的代码中，p为共享变量，线程1先启动，执行sleep语句，此时p.name为zhangsan，因为线程1休眠，所以线程2抢占到CPU，线程2启动执行sleep语句，线程1则抢占到CPU，执行p.name &#x3D; “lisi”，此时p.name为lisi，在线程1执行完之后，线程2才拿到CPU，打印p.name的值，所以为lisi。 123456789101112131415161718192021222324252627282930public class ThreadLocal1 &#123; static Person p = new Person(); public static void main(String[] args) &#123; //线程1 new Thread(() -&gt;&#123; try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; p.name = &quot;lisi&quot;; &#125;).start(); //线程2 new Thread(() -&gt;&#123; try &#123; Thread.sleep(2000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(p.name); &#125;).start(); &#125;&#125;class Person&#123; String name = &quot;zhangsan&quot;;&#125;output:lisi 但是在使用了ThreadLocal后，情况则不同了。 1234567891011121314151617181920212223242526272829public class ThreadLocal2 &#123; static ThreadLocal&lt;Person&gt; tl = new ThreadLocal&lt;&gt;(); public static void main(String[] args) &#123; new Thread(() -&gt;&#123; try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; tl.set(new Person(&quot;zhangsan&quot;)); &#125;).start(); new Thread(()-&gt;&#123; try &#123; Thread.sleep(2000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(tl.get()); //输出null &#125;).start(); &#125; static class Person&#123; String name = &quot;zhangsan&quot;; public Person(String name)&#123;this.name = name;&#125; &#125;&#125; 装在ThreadLocal中的域或对象只能该线程访问的到，其他线程访问不到。 ThreadLocal用处：在线程上下文传递变量 源码分析： 1234567891011121314151617181920212223//先来看set方法 public void set(T value) &#123; //获得当前线程 Thread t = Thread.currentThread(); ThreadLocalMap map = getMap(t); if (map != null) &#123; //this为tl，value为Person对象 map.set(this, value); &#125; else &#123; createMap(t, value); &#125; &#125;//getMap方法(拿到当前线程的Map) ThreadLocalMap getMap(Thread t) &#123; //threadLocals为Thread的成员变量，每当new Thread时都会有一个map。 return t.threadLocals; &#125; ThreadLocal.ThreadLocalMap threadLocals = null;//小结：Person对象被set进当前线程的map当中，其他线程肯定就get不到了。 我们再往下看ThreadLocalMap中的set方法 123456789101112131415161718192021222324252627282930private void set(ThreadLocal&lt;?&gt; key, Object value) &#123; // We don&#x27;t use a fast path as with get() because it is at // least as common to use set() to create new entries as // it is to replace existing ones, in which case, a fast // path would fail more often than not. Entry[] tab = table; int len = tab.length; int i = key.threadLocalHashCode &amp; (len-1); for (Entry e = tab[i]; e != null; e = tab[i = nextIndex(i, len)]) &#123; if (e.refersTo(key)) &#123; e.value = value; return; &#125; if (e.refersTo(null)) &#123; replaceStaleEntry(key, value, i); return; &#125; &#125; tab[i] = new Entry(key, value); int sz = ++size; if (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold) rehash(); &#125; 我们发现set方法最终会生成一个Entry对象。 123456789static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; &#123; /** The value associated with this ThreadLocal. */ Object value; Entry(ThreadLocal&lt;?&gt; k, Object v) &#123; super(k); value = v; &#125;&#125; Entry继承了weakReference，表示是一个弱引用。在Entry的构造方法中，我们可以发现首先调用了super(k),k就是上面的tl，super()是父类的构造方法，相当于调用了new weakReference(tl)，也就是说Entry的k是通过一个弱引用指向了tl。 为什么Entry要使用弱引用呢？ 若是强引用，即使tl &#x3D; null，但key的引用依然指向ThreadLocal对象，所以会有内存泄露，而使用弱引用则不会。但是这样也会产生内存泄漏，因为即使key被回收了，但是value指向的对象并不会被回收，在这种情况下get(key)，key是null，我们可能拿不到对应的value，拿不到的话value就没用处了，一样会产生内存泄漏。所以当我们不在用到ThreadLocal这个对象的时候一定要加一个tl.remove()。 ThreadLocal相关面试题： 你知道Srping里面声明式事务的注解内部是怎么完成的吗？","categories":[],"tags":[{"name":"learnKnowledge","slug":"learnKnowledge","permalink":"http://zutlh.top/tags/learnKnowledge/"}]},{"title":"多态","slug":"polymorphic","date":"2022-04-29T06:01:41.000Z","updated":"2022-05-10T07:05:49.941Z","comments":true,"path":"2022/04/29/polymorphic/","link":"","permalink":"http://zutlh.top/2022/04/29/polymorphic/","excerpt":"","text":"方法调用绑定12345public static void tune(Instrument i);public class Instrument&#123;&#125;public class Wind extends Instrument&#123;&#125;public class Guitar extends Instrument&#123;&#125; tune接收一个Instrument的引用。那么在这种情况下，编译器怎么才能知道这个Instrument引用指向的是Wind对象，而不是Guitar对象呢？实际上，编译器无法得知。 ​ 将一个方法调用同一个方法主体关联起来被称作绑定。若在程序执行前进行绑定（如果有的话，由编译器和连接程序实现），叫做前期绑定。读者可能以前没有听说过这个术语，因为它是面向过程的语言中不需要选择就默认的绑定方式。例如，C只有一种方法调用，那就是前期绑定。 ​ 上述程序之所以令人迷惑，主要是因为前期绑定。因为，当编译器只有一个Instrument引用时，它无法知道究竟调用哪个方法才对。 ​ 解决的办法就是后期绑定，它的含义就是在运行时根据对象的类型进行绑定。后期绑定也叫做动态绑定或运行时绑定。如果一种语言想实现后期绑定，就必须具有某种机制，以便在运行时能判断对象的类型，从而调用恰当的方法。也就是说，编译器一直不知道对象的类型，但在方法调用机制能找到正确的方法体，并加以调用。后期绑定机制随编程语言的不同而有所不同，但是只要想一下就会得知，不管怎样都必须在对象中安置某种“类型信息”。 ​ Java中除了static方法和final方法（private方法也属于final方法）之外，其他所有的方法都是后期绑定。这意味着通常情况下，我们不必判定是否应该进行后期绑定——他会自动发生。 ​ 为什么要将某个方法声明为final呢？正如之前提到的那样，它可以防止其他人覆盖该方法。但更重要的一点或许是：这样做可以有效地“关闭”动态绑定，或者说，告诉编译器不需要对其进行动态绑定。这样，编译器就可以为final方法调用生成更有效的代码。然而，大多数情况下，这样做对程序的整体性能不会有什么改观。所以，最好根据设计来决定是否使用final，而不是出于试图提高性能的目的来使用final。 产生正确的行为​ 一旦知道Java中所有方法都是通过动态绑定实现多态这个事实之后，我们就可以编写只与基类打交道的代码了，并且这些 代码对所有的导出类都可以正确运行。或者换一种说法，发送消息给某个对象，让该对象去断定应该做什么事。 ​ 面向对象程序设计中，有一个经典的例子就是“几何形状”(shape)。因为它很直观，所以经常用到。 ​ 在“几何形状”这个例子中，有一个基类shape，以及多个导出类——如Circle、Square、Triangle等。这个例子之所以好用，是因为我们可以说“圆是一种几何形状”。 向上转型可以像下面这条语句这么简单： 1Shape s = new Circle(); 这里，创建了一个Circle对象，并把得到的引用立即赋值给Shape，这样看似错误，但实际上是没问题的。因为通过继承，Circle就是一种Shape。 ​ 假设你调用一个基类方法(它已在导出类被覆盖): 1s.draw(); 你可能再次认为调用的是Shape的draw(),因为这毕竟是一个Shape引用，那么编辑器是怎么知道 去做其他事情呢？由于后期绑定（多态），还是正确调用了Circle.draw()方法。 ​ 下面的例子稍微有所不同： 12345678910111213141516171819202122232425262728293031323334353637public class Shape&#123; public void draw()&#123;&#125; public void erase()&#123;&#125;&#125;public class Circle extends Shape&#123; public void draw()&#123; print(&quot;Circle.draw&quot;)&#125; public void erase()&#123; print(&quot;Circle.erase&quot;)&#125;&#125;public class Square extends Shape&#123; public void draw()&#123; print(&quot;Square.draw&quot;)&#125; public void erase()&#123; print(&quot;Square.erase&quot;)&#125;&#125;public class Triangle extends Shape&#123; public void draw()&#123; print(&quot;Triangle.draw&quot;)&#125; public void erase()&#123; print(&quot;Triangle.erase&quot;)&#125;&#125;public class RandomShapeGenerator&#123; private Random rand = new Random(47); public shape next()&#123; switch(rand.nextInt(3))&#123; default: case 0: return new Circle(); case 1: return new Square(); case 2: return new Triangle(); &#125; &#125;&#125;public class Shapes&#123; private static RandomShapeGenerator gen = new RandomShapeGenerator(); public static void main(String[] args)&#123; Shape[] s = new Shape[9]; for(int i = 0;i&lt;s.length;i++) s[i] = gen.next(); for(Shape shp: s) shp.draw(); &#125;&#125; ​ Shape基类为自它那里继承而来的所有导出类建立了一个公共接口——也就是说，所有形状都可以描绘和擦除。导出类通过覆盖这些定义，来为每种特殊类型的几何形状提供单独的行为。 ​ RandomShapeGenerator是一种“工厂”(factory)，在我们每次调用next()方法时，它可以为随机选择的Shape对象产生一个引用。请注意向上转型时在return语句里发生的。每个return语句取得一个指向某个Circle、Square或者Triangle的引用，并将其以Shape类型从next()方法中发送出去。所以无论我们在什么时候调用next()方法时，是绝对不可能知道具体类型到底是什么的，因为我们总是只能获得一个通用的Shape引用。 ​ main()包含了一个Shape引用组成的数组，通过调用RandomShapeGenerator.next()来填入数据。此时，我们只知道自己拥有一些Shape，除此之外不会知道更具体的情况(编译器也不知道)。然而，当我们遍历这个数组，并为每个数组元素调用draw()方法时，与类型有关的特定行为为神器的发生，我们可以从运行该程序时所产生的输出结果中发现这一点。 ​ 随机选择几何形状是为了让大家理解：在编译时，编译器不需要获得任何特殊信息就能进行正确的调用。对draw()方法的所有调用都是通过动态绑定进行的。 总结​ 多态意味着“不同的形式”。在面向对象的程序设计中，我们持有从基类继承而来的相同接口，以及使用该接口的不同形式：不同版本的动态绑定方法。 ​ 在本章中我们已经知道，如果不运用数据抽象和继承，就不可能理解或者甚至不可能创建多态的例子。多态是一种不能单独来看待的特性，相反它只能作为类关系“全景”中的一部分，与其他特性协同工作。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://zutlh.top/tags/Java/"}]},{"title":"final和static关键字","slug":"finalandstatic","date":"2022-04-22T08:00:38.000Z","updated":"2022-04-28T06:05:00.517Z","comments":true,"path":"2022/04/22/finalandstatic/","link":"","permalink":"http://zutlh.top/2022/04/22/finalandstatic/","excerpt":"","text":"final参数 Java允许在参数列表中以声明的方式将参数指明为final。这意味着你无法在方法中更改参数引用所指向的对象： 123456789101112131415161718192021222324class Gizmo&#123; public void spin()&#123; &#125;&#125;public class FinalArguments&#123; void with(final Gizmo g)&#123; //! g = new Gizmo(); // Illegal -- g is final &#125; void without(Gizmo g)&#123; g = new Gizmo(); //ok -- g not final g.spin(); &#125; //void f(final int i)&#123;i++;&#125; //can&#x27;t change //you can only read from final primitive: int g(final int i)&#123; return i+1; &#125; public static void main(String[] args)&#123; FinalArguments bf = new FinalArguments(); bf.without(null); bf.with(null); &#125;&#125; 方法f()和g()展示了当基本类型的参数被指明为final时所出现的结果：你可以读参数，但却无法修改参数。这一特性主要用来向匿名内部类传递数据。 final方法​ 使用final方法的原因有两个。1、把方法锁定，以防任何继承类修改它的含义。这是出于设计的考虑：想要确保在继承中使方法行为保持不变，并且不会被覆盖。 ​ 过去建议使用final方法的第二个原因是效率。在Java的早期实现中，如果将一个方法指明为final，就是同意编译器将针对该方法的所有调用都转为内嵌调用。当编译器发现一个final方法调用命令时，它会根据自己的谨慎判断，跳过插入程序代码这种正常方式而执行方法调用机制（将参数压入栈，跳至方法代码处执行，然后跳回并清理栈中的参数，处理返回值），并且以方法体中的实际代码的副本来代替方法调用。这将消除方法调用的开销。当然，如果一个方法很大，你的程序代码就会膨胀，因而可能看不到内嵌带来的任何性能提高。因为，所带来的性能提高会因为花费于方法内的时间量而被缩减。 ​ 在最近的Java版本中，虚拟机（特别时hotspot技术）可以探测到这些情况，并优化去掉这些效率反而降低的额外的内嵌调用，因此不再需要使用final方法来进行优化了。事实上，这种做法正在逐渐地收到劝阻。在使用Java SE5&#x2F;6时，应该让编译器和JVM去处理效率问题，只有在想要明确禁止覆盖时，才将方法设置为final的。 final和private关键字​ 类中所有的private方法都隐式地指定为是final的。由于无法取用private方法，所以也就无法覆盖它。可以对private方法添加final修饰词，但这并不能给该方法增加任何额外的意义。 ​ 这一问题会造成混淆。因为，如果你试图覆盖一个private方法（隐含是final的），似乎是奏效的，而且编译器也不会给出错误信息： 123456789101112131415161718192021222324252627282930313233343536373839404142class WithFinals&#123; // Identical to &quot;private&quot; alone private final void f()&#123; print(&quot;WithFinals.f()&quot;);&#125; // Also automatically &quot;final&quot; private void g()&#123; print(&quot;WithFinals.g()&quot;);&#125;&#125;class OverridingPrivate extends WithFinals&#123; private final void f()&#123; print(&quot;OverridingPrivate.f()&quot;); &#125; private void g()&#123; print(&quot;OverridingPrivate.g()&quot;); &#125;&#125;class OverridingPrivate2 extends OverridingPrivate&#123; public final void f()&#123; print(&quot;OverridingPrivate2.f()&quot;); &#125; public void g()&#123; print(&quot;OverridingPrivate2.g()&quot;); &#125;&#125;public class FinalOverridingIllusion&#123; public static void main(String[] args)&#123; OverridingPrivate2 op2 = new OverridingPrivate2(); op2.f(); op2.g(); // you can upcast: OverridingPrivate op = op2; //but you can&#x27;t call the methods: //! op.f(); //! op.g(); // same here: WithFinals wf = op2; //! wf.f(); //! wf.g(); &#125;&#125;/* Output:OverridingPrivate2.f()OverridingPrivate2.g()*/ ”覆盖”只有在某方法是基类的接口的一部分时才会出现。即，必须能将一个对象向上转型为它的基本类型并调用相同的方法。如果某方法为private，他就不是基类接口的一部分。他仅是一些隐藏于类中的程序代码，只不过时具有相同的名称而已。但如果在导出类中以相同的名称生成一个public、protected或包访问权限方法的话，该方法就不会产生在基类中出现的“仅具有相同名称”的情况。此时你并没有覆盖该方法，仅是生成了一个新的方法。由于private方法无法触及而且能有效隐藏，所以除了把它看成时因为它所归属的类的组织结构的原因而存在外，其他任何事物都不需要考虑到它。 final类​ 当将某个类的整体定义为final时，就表明了你不打算继承该类。而且也不允许别人这么做。换句话说，出于某种考虑，你对该类的设计用不需要做任何变动，或者出于安全考虑，你不希望它有子类。 1234567891011121314151617181920class SmallBrain&#123;&#125;final class Dinosaur&#123; int i = 7; int j = 1; SmallBrain x = new SmallBrain(); void f()&#123;&#125; //! class Further extends DinoSaur&#123;&#125; // error:Can&#x27;t extend final class &#x27;Dinosaur&#x27; public class Jurassic&#123; public static void main(String[] args)&#123; Dinosaur n = new Dinosaur(); n.f(); n.i = 40; n.j++; &#125; &#125; &#125; ​ 请注意，final类的域可以根据个人的意愿选择为是或不是final。不论类是否被定义为final，相同的规则都适用于定义为final的域。然而，由于final类禁止继承，所以final类中所有的方法都会隐式指定为final的，因为无法覆盖它们。在final类中可以给方法添加final修饰词，但这不会增添任何意义。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://zutlh.top/tags/Java/"}]},{"title":"Optional详解","slug":"newpapername","date":"2022-04-20T02:29:34.000Z","updated":"2022-04-21T07:45:25.493Z","comments":true,"path":"2022/04/20/newpapername/","link":"","permalink":"http://zutlh.top/2022/04/20/newpapername/","excerpt":"","text":"&lt;!--more--&gt; 在文章的开头，先说下NPE问题，NPE问题就是，我们在开发中经常碰到的NullPointerException.假设我们有两个类，他们的UML类图如下图所示 在这种情况下，有如下代码 1user.getAddress().getProvince(); 这种写法，在user为null时，是有可能报NullPointerException异常的。为了解决这个问题，于是采用下面的写法 123456if(user!=null)&#123; Address address = user.getAddress(); if(address!=null)&#123; String province = address.getProvince(); &#125;&#125; 这种写法是比较丑陋的，为了避免上述丑陋的写法，让丑陋的设计变得优雅。JAVA8提供了Optional类来优化这种写法，接下来的正文部分进行详细说明 API介绍先介绍一下API，与其他文章不同的是，本文采取类比的方式来讲，同时结合源码。而不像其他文章一样，一个个API罗列出来，让人找不到重点。 1、Optional(T value),empty(),of(T value),ofNullable(T value)这四个函数之间具有相关性，因此放在一组进行记忆。 先说明一下，Optional(T value)，即构造函数，它是private权限的，不能由外部调用的。其余三个函数是public权限，供我们所调用。那么，Optional的本质，就是内部储存了一个真实的值，在构造的时候，就直接判断其值是否为空。好吧，这么说还是比较抽象。直接上Optional(T value)构造函数的源码，如下图所示 那么，of(T value)的源码如下 123public static &lt;T&gt; Optional&lt;T&gt; of(T value) &#123; return new Optional&lt;&gt;(value);&#125; 也就是说of(T value)函数内部调用了构造函数。根据构造函数的源码我们可以得出两个结论: 通过of(T value)函数所构造出的Optional对象，当Value值为空时，依然会报NullPointerException。 通过of(T value)函数所构造出的Optional对象，当Value值不为空时，能正常构造Optional对象。 除此之外呢，Optional类内部还维护一个value为null的对象，大概就是长下面这样的 12345678910111213public final class Optional&lt;T&gt; &#123; //省略.... private static final Optional&lt;?&gt; EMPTY = new Optional&lt;&gt;(); private Optional() &#123; this.value = null; &#125; //省略... public static&lt;T&gt; Optional&lt;T&gt; empty() &#123; @SuppressWarnings(&quot;unchecked&quot;) Optional&lt;T&gt; t = (Optional&lt;T&gt;) EMPTY; return t; &#125;&#125; 那么，empty（）的作用就是返回EMPTY对象。 好了铺垫了这么多，可以说ofNullable(T value)的作用了，上源码 123public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value) &#123; return value == null ? empty() : of(value);&#125; 好吧，大家应该都看得懂什么意思了。相比较of(T value)的区别就是，当value值为null时，of(T value)会报NullPointerException异常；ofNullable(T value)不会throw Exception，ofNullable(T value)直接返回一个EMPTY对象。 那是不是意味着，我们在项目中只用ofNullable函数而不用of函数呢? 不是的，一个东西存在那么自然有存在的价值。当我们在运行过程中，不想隐藏NullPointerException。而是要立即报告，这种情况下就用Of函数。但是不得不承认，这样的场景真的很少。博主也仅在写junit测试用例中用到过此函数。 2、orElse(T other)，orElseGet(Supplier other)和orElseThrow(Supplier exceptionSupplier)这三个函数放一组进行记忆，都是在构造函数传入的value值为null时，进行调用的。orElse和orElseGet的用法如下所示，相当于value值为null时，给予一个默认值: 123456789101112@Testpublic void test() &#123; User user = null; user = Optional.ofNullable(user).orElse(createUser()); user = Optional.ofNullable(user).orElseGet(() -&gt; createUser());&#125;public User createUser()&#123; User user = new User(); user.setName(&quot;zhangsan&quot;); return user;&#125; 这两个函数的区别：当user值不为null时，orElse函数依然会执行createUser()方法，而orElseGet函数并不会执行createUser()方法，大家可自行测试。 至于orElseThrow，就是value值为null时,直接抛一个异常出去，用法如下所示 12User user = null;Optional.ofNullable(user).orElseThrow(()-&gt;new Exception(&quot;用户不存在&quot;)); 3、map(Function mapper)和flatMap(Function&gt; mapper)这两个函数放在一组记忆，这两个函数做的是转换值的操作。 直接上源码 1234567891011121314151617181920 public final class Optional&lt;T&gt; &#123; //省略.... public&lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper) &#123; Objects.requireNonNull(mapper); if (!isPresent()) return empty(); else &#123; return Optional.ofNullable(mapper.apply(value)); &#125; &#125; //省略... public&lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper) &#123; Objects.requireNonNull(mapper); if (!isPresent()) return empty(); else &#123; return Objects.requireNonNull(mapper.apply(value)); &#125; &#125;&#125; 这两个函数，在函数体上没什么区别。唯一区别的就是入参，map函数所接受的入参类型为Function&lt;? super T, ? extends U&gt;，而flapMap的入参类型为Function&lt;? super T, Optional&lt;U&gt;&gt;。 在具体用法上，对于map而言： 如果User结构是下面这样的 123456public class User &#123; private String name; public String getName() &#123; return name; &#125;&#125; 这时候取name的写法如下所示 1String city = Optional.ofNullable(user).map(u-&gt; u.getName()).get(); 对于flatMap而言: 如果User结构是下面这样的 123456public class User &#123; private String name; public Optional&lt;String&gt; getName() &#123; return Optional.ofNullable(name); &#125;&#125; 这时候取name的写法如下所示 1String city = Optional.ofNullable(user).flatMap(u-&gt; u.getName()).get(); 4、isPresent()和ifPresent(Consumer consumer)这两个函数放在一起记忆，isPresent即判断value值是否为空，而ifPresent就是在value值不为空时，做一些操作。这两个函数的源码如下 1234567891011public final class Optional&lt;T&gt; &#123; //省略.... public boolean isPresent() &#123; return value != null; &#125; //省略... public void ifPresent(Consumer&lt;? super T&gt; consumer) &#123; if (value != null) consumer.accept(value); &#125;&#125; 需要额外说明的是，大家千万不要把 123if (user != null)&#123; // TODO: do something&#125; 给写成 1234User user = Optional.ofNullable(user);if (Optional.isPresent())&#123; // TODO: do something&#125; 因为这样写，代码结构依然丑陋。博主会在后面给出正确写法 至于ifPresent(Consumer&lt;? super T&gt; consumer)，用法也很简单，如下所示 123Optional.ofNullable(user).ifPresent(u-&gt;&#123; // TODO: do something&#125;); 5、filter(Predicate predicate)不多说，直接上源码 12345678public final class Optional&lt;T&gt; &#123; //省略.... Objects.requireNonNull(predicate); if (!isPresent()) return this; else return predicate.test(value) ? this : empty();&#125; filter 方法接受一个 Predicate 来对 Optional 中包含的值进行过滤，如果包含的值满足条件，那么还是返回这个 Optional；否则返回 Optional.empty。 用法如下 1Optional&lt;User&gt; user1 = Optional.ofNullable(user).filter(u -&gt; u.getName().length()&lt;6); 如上所示，如果user的name的长度是小于6的，则返回。如果是大于6的，则返回一个EMPTY对象。 实战使用例一在函数方法中 以前写法 1234567891011public String getCity(User user) throws Exception&#123; if(user!=null)&#123; if(user.getAddress()!=null)&#123; Address address = user.getAddress(); if(address.getCity()!=null)&#123; return address.getCity(); &#125; &#125; &#125; throw new Excpetion(&quot;取值错误&quot;); &#125; JAVA8写法 123456public String getCity(User user) throws Exception&#123; return Optional.ofNullable(user) .map(u-&gt; u.getAddress()) .map(a-&gt;a.getCity()) .orElseThrow(()-&gt;new Exception(&quot;取指错误&quot;));&#125; 例二比如，在主程序中 以前写法 123if(user!=null)&#123; dosomething(user);&#125; JAVA8写法 1234 Optional.ofNullable(user) .ifPresent(u-&gt;&#123; dosomething(u);&#125;); 例三以前写法 123456789101112public User getUser(User user) throws Exception&#123; if(user!=null)&#123; String name = user.getName(); if(&quot;zhangsan&quot;.equals(name))&#123; return user; &#125; &#125;else&#123; user = new User(); user.setName(&quot;zhangsan&quot;); return user; &#125;&#125; java8写法 123456789public User getUser(User user) &#123; return Optional.ofNullable(user) .filter(u-&gt;&quot;zhangsan&quot;.equals(u.getName())) .orElseGet(()-&gt; &#123; User user1 = new User(); user1.setName(&quot;zhangsan&quot;); return user1; &#125;);&#125; 其他的例子，不一一列举了。不过采用这种链式编程，虽然代码优雅了。但是，逻辑性没那么明显，可读性有所降低，大家项目中看情况酌情使用。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://zutlh.top/tags/Java/"}]}],"categories":[],"tags":[{"name":"learnKnowledge","slug":"learnKnowledge","permalink":"http://zutlh.top/tags/learnKnowledge/"},{"name":"Java","slug":"Java","permalink":"http://zutlh.top/tags/Java/"}]}